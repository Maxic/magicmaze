[gd_resource type="VisualShader" load_steps=27 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = SubResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 0

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=12]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.25 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=14]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorConstant" id=15]
constant = Color( 1, 0.082283, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "vertex"

[sub_resource type="VisualShaderNodeColorConstant" id=17]
constant = Color( 1, 0.749354, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=19]

[sub_resource type="OpenSimplexNoise" id=20]
octaves = 4
period = 69.0
lacunarity = 3.11

[sub_resource type="NoiseTexture" id=21]
seamless = true
noise = SubResource( 20 )

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = SubResource( 21 )

[sub_resource type="VisualShaderNodeScalarOp" id=23]
operator = 3

[sub_resource type="VisualShaderNodeTransformVecMult" id=25]

[sub_resource type="VisualShaderNodeVectorDecompose" id=26]

[sub_resource type="VisualShaderNodeVectorInterp" id=27]
output_port_for_preview = 0

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_33;
uniform sampler2D tex_frg_11;



void vertex() {
// Output:0

}

void fragment() {
// Color:29
	vec3 n_out29p0 = vec3(1.000000, 0.082283, 0.000000);
	float n_out29p1 = 1.000000;

// Color:30
	vec3 n_out30p0 = vec3(1.000000, 0.749354, 0.000000);
	float n_out30p1 = 1.000000;

// Texture:33
	vec4 tex_frg_33_read = texture(tex_frg_33, UV.xy);
	vec3 n_out33p0 = tex_frg_33_read.rgb;
	float n_out33p1 = tex_frg_33_read.a;

// VectorMix:32
	vec3 n_in32p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in32p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out32p0 = mix(n_in32p0, n_in32p1, n_out33p0);

// Input:23
	vec3 n_out23p0 = VERTEX;

// Input:19
	float n_out19p0 = TIME;

// ScalarFunc:20
	float n_out20p0 = sin(n_out19p0);

// ScalarOp:25
	float n_in25p1 = 0.25000;
	float n_out25p0 = n_out20p0 * n_in25p1;

// VectorOp:24
	vec3 n_out24p0 = n_out23p0 + vec3(n_out25p0);

// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, n_out24p0.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// ScalarOp:34
	float n_out34p0 = dot(n_out32p0, vec3(0.333333, 0.333333, 0.333333)) / dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333));

// VectorMix:26
	vec3 n_out26p0 = mix(n_out29p0, n_out30p0, vec3(n_out34p0));

// Input:2
	mat4 n_out2p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out2p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// ScalarOp:10
	float n_in10p1 = 0.00000;
	float n_out10p0 = n_out5p1 + n_in10p1;

// ScalarOp:31
	float n_in31p1 = 4.00000;
	float n_out31p0 = n_out10p0 * n_in31p1;

// VectorMix:8
	vec3 n_in8p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 = mix(n_out26p0, n_in8p1, vec3(n_out31p0));

// Output:0
	ALBEDO = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -396.75, -405 )
nodes/fragment/0/position = Vector2( 2440, -140 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -540, 120 )
nodes/fragment/3/node = SubResource( 16 )
nodes/fragment/3/position = Vector2( -540, 280 )
nodes/fragment/4/node = SubResource( 25 )
nodes/fragment/4/position = Vector2( -180, 60 )
nodes/fragment/5/node = SubResource( 26 )
nodes/fragment/5/position = Vector2( 320, 80 )
nodes/fragment/8/node = SubResource( 27 )
nodes/fragment/8/position = Vector2( 2060, -160 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 860, 40 )
nodes/fragment/11/node = SubResource( 4 )
nodes/fragment/11/position = Vector2( 40, -480 )
nodes/fragment/12/node = SubResource( 5 )
nodes/fragment/12/position = Vector2( 20, 760 )
nodes/fragment/13/node = SubResource( 6 )
nodes/fragment/13/position = Vector2( 440, 740 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 1020, 940 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( -1420, -200 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -1080, -200 )
nodes/fragment/23/node = SubResource( 11 )
nodes/fragment/23/position = Vector2( -1140, -440 )
nodes/fragment/24/node = SubResource( 12 )
nodes/fragment/24/position = Vector2( -440, -500 )
nodes/fragment/25/node = SubResource( 13 )
nodes/fragment/25/position = Vector2( -620, -160 )
nodes/fragment/26/node = SubResource( 14 )
nodes/fragment/26/position = Vector2( 1220, -440 )
nodes/fragment/29/node = SubResource( 15 )
nodes/fragment/29/position = Vector2( 1080, -660 )
nodes/fragment/30/node = SubResource( 17 )
nodes/fragment/30/position = Vector2( 760, -660 )
nodes/fragment/31/node = SubResource( 18 )
nodes/fragment/31/position = Vector2( 1460, 60 )
nodes/fragment/32/node = SubResource( 19 )
nodes/fragment/32/position = Vector2( -20, -780 )
nodes/fragment/33/node = SubResource( 22 )
nodes/fragment/33/position = Vector2( -520, -1000 )
nodes/fragment/34/node = SubResource( 23 )
nodes/fragment/34/position = Vector2( 700, -440 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 1, 4, 0, 5, 0, 8, 0, 0, 0, 3, 0, 4, 1, 4, 0, 5, 0, 8, 0, 0, 0, 5, 1, 10, 0, 12, 0, 13, 0, 19, 0, 20, 0, 24, 0, 11, 0, 20, 0, 25, 0, 25, 0, 24, 1, 2, 0, 4, 0, 29, 0, 26, 0, 30, 0, 26, 1, 26, 0, 8, 0, 10, 0, 31, 0, 31, 0, 8, 2, 33, 0, 32, 2, 11, 0, 34, 1, 34, 0, 26, 2, 32, 0, 34, 0, 23, 0, 24, 0 )
