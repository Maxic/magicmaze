[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.2 ]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "camera"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTransformVecMult" id=3]

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.8585, 0.533804, 0.982168, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=7]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:7
	vec3 n_out7p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out7p1 = 1.000000;

// Color:6
	vec3 n_out6p0 = vec3(0.858500, 0.533804, 0.982168);
	float n_out6p1 = 1.000000;

// Input:2
	mat4 n_out2p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out2p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// ScalarOp:10
	float n_in10p1 = 0.20000;
	float n_out10p0 = n_out5p1 + n_in10p1;

// ScalarOp:9
	float n_in9p1 = 3.00000;
	float n_out9p0 = n_out10p0 * n_in9p1;

// VectorMix:8
	vec3 n_out8p0 = mix(n_out7p0, n_out6p0, vec3(n_out9p0));

// Output:0
	ALBEDO = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 31.35, 17.3775 )
nodes/fragment/0/position = Vector2( 700, 60 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -300, 160 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -320, 240 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -120, 160 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 0, 340 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 320, 120 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 320, 20 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 500, 140 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 420, 280 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( 240, 340 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 5, 0, 7, 0, 8, 0, 6, 0, 8, 1, 8, 0, 0, 0, 9, 0, 8, 2, 5, 1, 10, 0, 10, 0, 9, 0 )
